import requests
import geocoder

URL = 'https://api.weather.yandex.ru/v1/informers/'


class Weather:
    def __init__(self, api):
        self.api = api

    def get_weather(self, user, city_name):
        if type(city_name) == str:
            g = geocoder.geonames(city_name, key=user, lang='ru-RU')
            city_lat = g.latlng[0]
            city_lon = g.latlng[1]
        elif type(city_name) == list:
            city_lat = city_name[0]
            city_lon = city_name[1]
        else:
            print('We have a problem')

        params = {'lat': city_lat, 'lon': city_lon, 'lang': 'ru_RU'}
        headers = {'X-Yandex-API-Key': self.api}
        result = requests.get(URL, params=params, headers=headers).json()

        WEATHER_TRANSLATE = {
            'clear': '–Ø—Å–Ω–æ ‚òÄ',
            'partly-cloudy': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ ‚õÖ',
            'cloudy': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ üå•',
            'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅ',
            'partly-cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
            'partly-cloudy-and-rain': '–î–æ–∂–¥—å üåß',
            'overcast-and-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßüåß',
            'overcast-thunderstorms-with-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞ üå©',
            'cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
            'overcast-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
            'cloudy-and-rain': '–î–æ–∂–¥—å üåß',
            'overcast-and-wet-snow': '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üå®',
            'partly-cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
            'partly-cloudy-and-snow': '–°–Ω–µ–≥ üå®',
            'overcast-and-snow': '–°–Ω–µ–≥–æ–ø–∞–¥ üå®',
            'cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
            'overcast-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
            'cloudy-and-snow': '–°–Ω–µ–≥ üå®'}
        DAY_TRANSLATE = {
            'night': '–Ω–æ—á—å',
            'morning': '—É—Ç—Ä–æ',
            'day': '–¥–µ–Ω—å',
            'evening': '–≤–µ—á–µ—Ä',
        }

        WEATHER = {
            'now': {
                'temp': result['fact']['temp'],
                'temp_feels_like': result['fact']['feels_like'],
                'condition': WEATHER_TRANSLATE[result['fact']['condition']],
                'wind_speed': result['fact']['wind_speed'],
                'wind_gust': result['fact']['wind_gust'],
                'pressure': result['fact']['pressure_mm'],
                'humidity': result['fact']['humidity'],
            },
            'forecast': {}}

        for i in range(len(result['forecast']['parts'])):
            WEATHER['forecast'][i] = {
                'part_name': DAY_TRANSLATE[result['forecast']['parts'][i]['part_name']],
                'temp_min': result['forecast']['parts'][i]['temp_min'],
                'temp_max': result['forecast']['parts'][i]['temp_max'],
                'temp_feels_like': result['forecast']['parts'][i]['feels_like'],
                'condition': WEATHER_TRANSLATE[result['forecast']['parts'][i]['condition']],
                'wind_speed': result['forecast']['parts'][i]['wind_speed'],
                'wind_gust': result['forecast']['parts'][i]['wind_gust'],
                'pressure': result['forecast']['parts'][i]['pressure_mm'],
                'humidity': result['forecast']['parts'][i]['humidity'],
                'prec_mm': result['forecast']['parts'][i]['prec_mm'],
                'prec_period': int(int(result['forecast']['parts'][i]['prec_period']) / 60),
                'prec_prob': result['forecast']['parts'][i]['prec_prob'],
            }

        if type(city_name) == str:
            enter = '–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {} —Å–µ–π—á–∞—Å:\n'.format(city_name)
        elif type(city_name) == list:
            enter = '–ü–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å–µ–π—á–∞—Å:\n'

        now = '{}\n' \
              '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {}¬∞–° (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {}¬∞–°)\n' \
              '–í–µ—Ç–µ—Ä {} –º/c(–ø–æ—Ä—ã–≤—ã –¥–æ {} –º/c)\n' \
              '–î–∞–≤–ª–µ–Ω–∏–µ  {} –º–º.—Ä—Ç.—Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å {}%'.format(
            WEATHER['now']['condition'], WEATHER['now']['temp'], WEATHER['now']['temp_feels_like'],
            WEATHER['now']['wind_speed'], WEATHER['now']['wind_gust'], WEATHER['now']['pressure'],
            WEATHER['now']['humidity'])

        forecast = ""
        for i in range(len(WEATHER['forecast'])):
            forecast += '\n\n' \
                        '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {}:\n' \
                        '{}\n' \
                        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {}-{}¬∞–°(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {}¬∞–°)' \
                        '\n–í–µ—Ç–µ—Ä {} –º/c (–ø–æ—Ä—ã–≤—ã –¥–æ {} –º/c)\n' \
                        '–î–∞–≤–ª–µ–Ω–∏–µ {} –º–º.—Ä—Ç.—Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å {}%\n' \
                        '–û—Å–∞–¥–∫–∏ {} –º–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {} —á–∞—Å–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {}%'.format(
                WEATHER['forecast'][i]['part_name'],
                WEATHER['forecast'][i]['condition'],
                WEATHER['forecast'][i]['temp_min'], WEATHER['forecast'][i]['temp_max'],
                WEATHER['forecast'][i]['temp_feels_like'],
                WEATHER['forecast'][i]['wind_speed'], WEATHER['forecast'][i]['wind_gust'],
                WEATHER['forecast'][i]['pressure'], WEATHER['forecast'][i]['humidity'],
                WEATHER['forecast'][i]['prec_mm'], WEATHER['forecast'][i]['prec_period'],
                WEATHER['forecast'][i]['prec_prob'])
        return enter + now + forecast
